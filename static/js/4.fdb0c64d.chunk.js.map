{"version":3,"sources":["../../../../../../src/constants/abi/index.ts","../../../../../src/hooks/useTokenBalance.ts"],"names":[],"mappings":"gqyCAAA,sHAOM,EAAY,QAAM,UAElB,EAAe,IAAI,EAAU,EAAU,KAQvC,GAJgB,IAAI,EAAU,EAAW,KAIxB,IAAI,EAAU,EAAM,MAIhB,IAAI,EAAU,EAAU,I,oCCpBnD,iEAsBM,SAAU,EACd,EACA,GAC6B,I,EAA7B,yDAA2B,GAEZ,GASZ,QARD,cACE,GACE,GAAgB,CACd,SAAU,IAAI,IAAS,EAAc,KACrC,OAAQ,YACR,KAAM,CAAC,IAEX,UACD,QAAI,IATC,MAUR,OAAmB,OAAZ,QAAY,IAAZ,OAAY,EAAZ,EAAe,EACxB,C","file":"static/js/4.fdb0c64d.chunk.js","sourcesContent":["import { utils } from 'ethers';\nimport MultiCall from './MultiCall.json';\nimport MultiCall2 from './MultiCall2.json';\nimport ERC20 from './ERC20.json';\nimport ERC20Mock from './ERC20Mock.json';\nimport BlockNumberContract from './BlockNumber.json';\nconst Interface = utils.Interface;\nconst MultiCallABI = new Interface(MultiCall.abi);\nexport { MultiCall, MultiCallABI };\nconst MultiCall2ABI = new Interface(MultiCall2.abi);\nexport { MultiCall2, MultiCall2ABI };\nconst ERC20Interface = new Interface(ERC20.abi);\nexport { ERC20, ERC20Interface };\nconst ERC20MockInterface = new Interface(ERC20Mock.abi);\nexport { ERC20Mock, ERC20MockInterface };\nexport { BlockNumberContract };\nexport * from './doubler';\nexport * from './timestamp';\nexport * from './reverter';\n//# sourceMappingURL=index.js.map","import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns a balance of a given token for a given address.\n * @param tokenAddress address of a token contract.\n * @param address address of an account.\n * @param queryParams see {@link QueryParams}.\n * @public\n * @returns a balance which is `BigNumber`, or `undefined` if address or token is `Falsy` or not connected.\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const { account } = useEthers()\n * const daiBalance = useTokenBalance(DAI_ADDRESS, account)\n *\n * return (\n *   {daiBalance && <p>Dai balance: {formatUnits(daiBalance, 18)} DAI</p>}\n * )\n */\nexport function useTokenBalance(tokenAddress, address, queryParams = {}) {\n    var _a;\n    const { value: tokenBalance } = (_a = useCall(address &&\n        tokenAddress && {\n        contract: new Contract(tokenAddress, ERC20Interface),\n        method: 'balanceOf',\n        args: [address],\n    }, queryParams)) !== null && _a !== void 0 ? _a : {};\n    return tokenBalance === null || tokenBalance === void 0 ? void 0 : tokenBalance[0];\n}\n//# sourceMappingURL=useTokenBalance.js.map"],"sourceRoot":""}