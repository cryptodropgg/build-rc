{"version":3,"sources":["../../../../../src/helpers/gnosisSafeUtils.ts","../../../../../src/hooks/useGnosisSafeContract.ts","../../../../../src/hooks/usePromiseTransaction.ts","../../../../../src/helpers/getSignerFromOptions.ts","../../../../../src/hooks/useContractFunction.ts","../../src.ts/index.ts"],"names":["transactionName"],"mappings":"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","file":"static/js/1.4dcaa9d9.chunk.js","sourcesContent":["import { utils, constants } from 'ethers';\nimport { getChainById } from './chain';\nexport const GNOSIS_SAFE_ABI = [\n    'function nonce() view returns (uint256)',\n    'event ExecutionSuccess(bytes32 txHash, uint256 payment)',\n];\nexport const buildSafeTransaction = (template) => {\n    return {\n        to: template.to,\n        value: template.value || 0,\n        data: template.data || '0x',\n        operation: template.operation || 0,\n        safeTxGas: template.safeTxGas || 0,\n        baseGas: template.baseGas || 0,\n        gasPrice: template.gasPrice || 0,\n        gasToken: template.gasToken || constants.AddressZero,\n        refundReceiver: template.refundReceiver || constants.AddressZero,\n        nonce: template.nonce || 0,\n    };\n};\nconst EIP712_SAFE_TX_TYPE = {\n    SafeTx: [\n        { type: 'address', name: 'to' },\n        { type: 'uint256', name: 'value' },\n        { type: 'bytes', name: 'data' },\n        { type: 'uint8', name: 'operation' },\n        { type: 'uint256', name: 'safeTxGas' },\n        { type: 'uint256', name: 'baseGas' },\n        { type: 'uint256', name: 'gasPrice' },\n        { type: 'address', name: 'gasToken' },\n        { type: 'address', name: 'refundReceiver' },\n        { type: 'uint256', name: 'nonce' },\n    ],\n};\nexport const sanitizeTransactionRequest = (transactionRequest) => {\n    var _a;\n    return Object.assign(Object.assign({}, transactionRequest), { data: (_a = transactionRequest.data) !== null && _a !== void 0 ? _a : '0x' });\n};\nexport const calculateSafeTransactionHash = (safe, safeTx, chainId) => {\n    // TODO: Remove after WalletConnectV2 fix\n    // WalletConnectV2 incorrectly passes safeTxGas value, equal 0 (default value).\n    // Thus we have a mismatch between gnosis safeTxHash and one calculated by useDApp (safeTxGas is based on estimation)\n    safeTx = Object.assign(Object.assign({}, safeTx), { safeTxGas: 0 });\n    return utils._TypedDataEncoder.hash({ verifyingContract: safe.address, chainId }, EIP712_SAFE_TX_TYPE, safeTx);\n};\nexport const getLatestNonce = async (chainId, safeAddress) => {\n    var _a, _b, _c;\n    try {\n        const response = await fetch(`https://safe-transaction.${(_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.chainName}.gnosis.io/api/v1/safes/${safeAddress}/all-transactions?limit=1&executed=false&queued=true`);\n        if (!response.ok)\n            return null;\n        const allTransactions = await response.json();\n        const latestNonce = (_c = (_b = allTransactions === null || allTransactions === void 0 ? void 0 : allTransactions.results) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.nonce;\n        if (!latestNonce)\n            return null;\n        return latestNonce;\n    }\n    catch (err) {\n        console.error(err);\n        return undefined;\n    }\n};\nexport const waitForSafeTransaction = async (transactionPromise, contract, chainId, safeTx) => {\n    const safeTxHash = calculateSafeTransactionHash(contract, safeTx, chainId);\n    return new Promise((resolve, reject) => {\n        void transactionPromise.catch((err) => {\n            if ((err === null || err === void 0 ? void 0 : err.message) === 'Transaction was rejected') {\n                reject(err);\n            }\n        });\n        const onExecutionSuccess = async (txHash, _payment, event) => {\n            if (txHash === safeTxHash) {\n                contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n                const transaction = await event.getTransaction();\n                const receipt = await event.getTransactionReceipt();\n                resolve({ transaction, receipt, rejected: false });\n            }\n            else {\n                const currentNonce = await contract.nonce();\n                if (Number(currentNonce) > Number(safeTx.nonce)) {\n                    contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n                    const transaction = await event.getTransaction();\n                    const receipt = await event.getTransactionReceipt();\n                    resolve({\n                        transaction,\n                        receipt,\n                        rejected: true,\n                    });\n                }\n            }\n        };\n        contract.on('ExecutionSuccess', onExecutionSuccess);\n    });\n};\n//# sourceMappingURL=gnosisSafeUtils.js.map","import { useEffect, useRef } from 'react';\nimport { Contract } from 'ethers';\nimport { GNOSIS_SAFE_ABI } from '../helpers/gnosisSafeUtils';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport const useGnosisSafeContract = (account, provider) => {\n    const safeContract = useRef(undefined);\n    useEffect(() => {\n        return () => {\n            var _a;\n            (_a = safeContract.current) === null || _a === void 0 ? void 0 : _a.removeAllListeners();\n        };\n    }, []);\n    return {\n        get: () => {\n            if (!account || !provider) {\n                return undefined;\n            }\n            if (safeContract.current) {\n                safeContract.current.removeAllListeners();\n            }\n            safeContract.current = new Contract(account, GNOSIS_SAFE_ABI, provider);\n            return safeContract.current;\n        },\n    };\n};\n//# sourceMappingURL=useGnosisSafeContract.js.map","import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { BigNumber, errors } from 'ethers';\nimport { buildSafeTransaction, getLatestNonce } from '../helpers/gnosisSafeUtils';\nimport { useEthers } from './useEthers';\nimport { waitForSafeTransaction } from '../helpers/gnosisSafeUtils';\nimport { useGnosisSafeContract } from './useGnosisSafeContract';\n/**\n * @internal\n */\nexport async function estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage) {\n    if (!signer || !transactionRequest) {\n        return undefined;\n    }\n    try {\n        const estimatedGas = transactionRequest.gasLimit\n            ? BigNumber.from(transactionRequest.gasLimit)\n            : await signer.estimateGas(transactionRequest);\n        return estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);\n    }\n    catch (err) {\n        console.error(err);\n        return undefined;\n    }\n}\n/**\n * @internal\n */\nexport async function estimateContractFunctionGasLimit(contractWithSigner, functionName, args, gasLimitBufferPercentage) {\n    try {\n        const estimatedGas = await contractWithSigner.estimateGas[functionName](...args);\n        const gasLimit = estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);\n        return gasLimit;\n    }\n    catch (err) {\n        console.error(err);\n        return undefined;\n    }\n}\n/**\n * @internal\n */\nasync function isNonContractWallet(library, address) {\n    if (!library || !address) {\n        return true;\n    }\n    const code = await library.getCode(address);\n    return code === '0x';\n}\nconst isDroppedAndReplaced = (e) => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\nexport function usePromiseTransaction(chainId, options) {\n    const [state, setState] = useState({ status: 'None', transactionName: options === null || options === void 0 ? void 0 : options.transactionName });\n    const { addTransaction, updateTransaction } = useTransactionsContext();\n    const { addNotification } = useNotificationsContext();\n    const { library, account } = useEthers();\n    const gnosisSafe = useGnosisSafeContract(account, library);\n    const resetState = useCallback(() => {\n        setState(({ transactionName }) => ({ status: 'None', transactionName }));\n    }, [setState]);\n    const promiseTransaction = useCallback(async (transactionPromise, { safeTransaction } = {}, transactionRequest) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n        const handleNonContractWallet = async (transaction) => {\n            if (!chainId)\n                return;\n            setState(({ transactionName }) => ({ transactionName, transaction, status: 'Mining' }));\n            addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), { chainId }),\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            const receipt = await transaction.wait();\n            updateTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                receipt,\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            setState({\n                receipt,\n                transaction,\n                status: 'Success',\n                chainId,\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            return { transaction, receipt };\n        };\n        const handleContractWallet = async (transactionPromise, { safeTransaction } = {}) => {\n            var _a;\n            if (!chainId || !library || !account)\n                return;\n            setState({ status: 'CollectingSignaturePool', chainId, transactionName: options === null || options === void 0 ? void 0 : options.transactionName });\n            const gnosisSafeContract = gnosisSafe.get();\n            if (!gnosisSafeContract) {\n                throw new Error(\"Couldn't create Gnosis Safe contract instance\");\n            }\n            const latestNonce = await getLatestNonce(chainId, account);\n            const safeTx = buildSafeTransaction({\n                to: (_a = safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.to) !== null && _a !== void 0 ? _a : '',\n                value: safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.value,\n                data: safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.data,\n                safeTxGas: safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.safeTxGas,\n                nonce: latestNonce ? latestNonce + 1 : await gnosisSafeContract.nonce(),\n            });\n            const { transaction, receipt, rejected } = await waitForSafeTransaction(transactionPromise, gnosisSafeContract, chainId, safeTx);\n            if (rejected) {\n                const errorMessage = 'On-chain rejection created';\n                addTransaction({\n                    transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                    receipt,\n                    submittedAt: Date.now(),\n                    transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n                });\n                setState({\n                    status: 'Fail',\n                    transaction,\n                    receipt,\n                    errorMessage,\n                    chainId,\n                    transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n                });\n            }\n            else {\n                addTransaction({\n                    transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                    receipt,\n                    submittedAt: Date.now(),\n                    transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n                });\n                setState({\n                    receipt,\n                    transaction,\n                    status: 'Success',\n                    chainId,\n                    transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n                });\n            }\n            return { transaction, receipt };\n        };\n        if (!chainId)\n            return;\n        let transaction = undefined;\n        try {\n            setState({ status: 'PendingSignature', chainId, transactionName: options === null || options === void 0 ? void 0 : options.transactionName });\n            if (options === null || options === void 0 ? void 0 : options.enablePendingSignatureNotification) {\n                addNotification({\n                    notification: {\n                        type: 'transactionPendingSignature',\n                        submittedAt: Date.now(),\n                        transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n                        transactionRequest,\n                    },\n                    chainId: chainId,\n                });\n            }\n            const isContractWallet = !(await isNonContractWallet(library, account));\n            if (isContractWallet) {\n                const result = await handleContractWallet(transactionPromise, { safeTransaction });\n                transaction = result === null || result === void 0 ? void 0 : result.transaction;\n                return result === null || result === void 0 ? void 0 : result.receipt;\n            }\n            else {\n                transaction = await transactionPromise;\n                const result = await handleNonContractWallet(transaction);\n                transaction = result === null || result === void 0 ? void 0 : result.transaction;\n                return result === null || result === void 0 ? void 0 : result.receipt;\n            }\n        }\n        catch (e) {\n            const parsedErrorCode = parseInt((_g = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.code) !== null && _c !== void 0 ? _c : (_d = e.error) === null || _d === void 0 ? void 0 : _d.code) !== null && _e !== void 0 ? _e : (_f = e.data) === null || _f === void 0 ? void 0 : _f.code) !== null && _g !== void 0 ? _g : e.code);\n            const errorCode = isNaN(parsedErrorCode) ? undefined : parsedErrorCode;\n            const errorHash = (_l = (_k = (_j = (_h = e === null || e === void 0 ? void 0 : e.error) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.originalError) === null || _k === void 0 ? void 0 : _k.data) !== null && _l !== void 0 ? _l : (_m = e === null || e === void 0 ? void 0 : e.error) === null || _m === void 0 ? void 0 : _m.data;\n            const errorMessage = (_v = (_t = (_s = (_q = (_p = (_o = e.error) === null || _o === void 0 ? void 0 : _o.data) === null || _p === void 0 ? void 0 : _p.message) !== null && _q !== void 0 ? _q : (_r = e.error) === null || _r === void 0 ? void 0 : _r.message) !== null && _s !== void 0 ? _s : e.reason) !== null && _t !== void 0 ? _t : (_u = e.data) === null || _u === void 0 ? void 0 : _u.message) !== null && _v !== void 0 ? _v : e.message;\n            if (transaction) {\n                const droppedAndReplaced = isDroppedAndReplaced(e);\n                if (droppedAndReplaced) {\n                    const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n                    const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                    addNotification({\n                        notification: {\n                            type,\n                            submittedAt: Date.now(),\n                            transaction: e.replacement,\n                            receipt: e.receipt,\n                            transactionName: (_w = e.replacement) === null || _w === void 0 ? void 0 : _w.transactionName,\n                            originalTransaction: transaction,\n                        },\n                        chainId,\n                    });\n                    setState((prevState) => {\n                        var _a;\n                        return (Object.assign(Object.assign({}, prevState), { status, transaction: e.replacement, originalTransaction: transaction, receipt: e.receipt, transactionName: (_a = e.replacement) === null || _a === void 0 ? void 0 : _a.transactionName, errorMessage,\n                            errorCode,\n                            errorHash,\n                            chainId }));\n                    });\n                }\n                else {\n                    setState({\n                        status: 'Fail',\n                        transaction,\n                        receipt: e.receipt,\n                        errorMessage,\n                        errorCode,\n                        errorHash,\n                        chainId,\n                        transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n                    });\n                }\n            }\n            else {\n                setState({\n                    status: 'Exception',\n                    errorMessage,\n                    errorCode,\n                    errorHash,\n                    chainId,\n                    transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n                });\n            }\n            return undefined;\n        }\n    }, [chainId, addNotification, options === null || options === void 0 ? void 0 : options.transactionName, library, account]);\n    return { promiseTransaction, state, resetState };\n}\n//# sourceMappingURL=usePromiseTransaction.js.map","import { ethers } from 'ethers';\nexport const getSignerFromOptions = (provider, options, library) => {\n    const privateKey = options && 'privateKey' in options && options.privateKey;\n    const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n    const json = options && 'json' in options && options.json;\n    const password = options && 'password' in options && options.password;\n    const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n    const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n    const encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n    const optionsSigner = options && 'signer' in options && options.signer;\n    return (privateKeySigner ||\n        mnemonicPhraseSigner ||\n        encryptedJsonSigner ||\n        optionsSigner ||\n        (library && 'getSigner' in library ? library.getSigner() : undefined));\n};\n//# sourceMappingURL=getSignerFromOptions.js.map","import { useConfig } from './useConfig';\nimport { useCallback, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { estimateContractFunctionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function connectContractToSigner(contract, options, librarySigner) {\n    if (contract.signer) {\n        return contract;\n    }\n    if (options && 'signer' in options) {\n        return contract.connect(options.signer);\n    }\n    if (librarySigner) {\n        return contract.connect(librarySigner);\n    }\n    throw new TypeError('No signer available in contract, options or library');\n}\n/**\n * Hook returns an object with four variables: ``state`` , ``send``, ``events`` , and ``resetState``.\n *\n * The `state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * The `events` is a array of parsed transaction events of type [LogDescription](https://docs.ethers.io/v5/api/utils/abi/interface/#LogDescription).\n *\n * To send a transaction use `send` function returned by `useContractFunction`.\n * The function forwards arguments to ethers.js contract object, so that arguments map 1 to 1 with Solidity function arguments.\n * Additionally, there can be one extra argument - [TransactionOverrides](https://docs.ethers.io/v5/api/contract/contract/#contract-functionsSend), which can be used to manipulate transaction parameters like gasPrice, nonce, etc\n *\n * If typechain contract is supplied as contract parameter then function name and send arguments will be type checked.\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n * @public\n * @param contract contract which function is to be called , also see [Contract](https://docs.ethers.io/v5/api/contract/contract/)\n * @param functionName name of function to call\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with variables: `send` , `state` , `events`: `{ send: (...args: any[]) => void, state: TransactionStatus, events: LogDescription[] }`.\n *\n * @example\n * const { state, send } = useContractFunction(contract, 'deposit', { transactionName: 'Wrap' })\n *\n * const depositEther = (etherAmount: string) => {\n *   send({ value: utils.parseEther(etherAmount) })\n * }\n * @example\n * const { state, send } = useContractFunction(contract, 'withdraw', { transactionName: 'Unwrap' })\n *\n * const withdrawEther = (wethAmount: string) => {\n *   send(utils.parseEther(wethAmount))\n * }\n */\nexport function useContractFunction(contract, functionName, options) {\n    var _a, _b, _c;\n    const { library, chainId } = useEthers();\n    const transactionChainId = (options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId)) || chainId;\n    const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options);\n    const [events, setEvents] = useState(undefined);\n    const config = useConfig();\n    const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n    const providers = useReadonlyNetworks();\n    const provider = (transactionChainId && providers[transactionChainId]);\n    const send = useCallback(async (...args) => {\n        var _a;\n        if (contract) {\n            const numberOfArgs = contract.interface.getFunction(functionName).inputs.length;\n            const hasOpts = args.length > numberOfArgs;\n            if (args.length !== numberOfArgs && args.length !== numberOfArgs + 1) {\n                throw new Error(`Invalid number of arguments for function \"${functionName}\".`);\n            }\n            const signer = getSignerFromOptions(provider, options, library);\n            const contractWithSigner = connectContractToSigner(contract, options, signer);\n            const opts = hasOpts ? args[args.length - 1] : undefined;\n            const gasLimit = typeof opts === 'object' && Object.prototype.hasOwnProperty.call(opts, 'gasLimit')\n                ? opts.gasLimit\n                : (_a = (await estimateContractFunctionGasLimit(contractWithSigner, functionName, args, gasLimitBufferPercentage))) !== null && _a !== void 0 ? _a : null;\n            const modifiedOpts = Object.assign({ gasLimit }, opts);\n            const modifiedArgs = hasOpts ? args.slice(0, args.length - 1) : args;\n            const receipt = await promiseTransaction(contractWithSigner[functionName](...modifiedArgs, modifiedOpts), {\n                safeTransaction: {\n                    to: contract.address,\n                    value: opts === null || opts === void 0 ? void 0 : opts.value,\n                    data: contract.interface.encodeFunctionData(functionName, modifiedArgs),\n                    safeTxGas: gasLimit !== null && gasLimit !== void 0 ? gasLimit : undefined,\n                },\n            });\n            if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {\n                const events = receipt.logs.reduce((accumulatedLogs, log) => {\n                    try {\n                        return log.address.toLowerCase() === contract.address.toLowerCase()\n                            ? [...accumulatedLogs, contract.interface.parseLog(log)]\n                            : accumulatedLogs;\n                    }\n                    catch (_err) {\n                        return accumulatedLogs;\n                    }\n                }, []);\n                setEvents(events);\n            }\n            return receipt;\n        }\n    }, [contract, functionName, options, provider, library, gasLimitBufferPercentage, promiseTransaction]);\n    return { send, state, events, resetState };\n}\n//# sourceMappingURL=useContractFunction.js.map","\"use strict\";\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\nimport * as ethers from \"./ethers\";\ntry {\n    const anyGlobal = window;\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers;\n    }\n}\ncatch (error) { }\nexport { ethers };\nexport { Signer, Wallet, VoidSigner, getDefaultProvider, providers, BaseContract, Contract, ContractFactory, BigNumber, FixedNumber, constants, errors, logger, utils, wordlists, \n////////////////////////\n// Compile-Time Constants\nversion, Wordlist } from \"./ethers\";\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}